

[Data columns]
#
# ID        : Name of the columns containing the IDs. If the file does not have
#             an 'ID' column, set to 'None' and one will be automatically
#             generated.
# xy_coords : Names of the columns containing the (x, y) coordinates.
# data      : Names of the data columns to be analyzed with the clustering
#             method.
# uncert    : Names of the columns containing the data uncertainties. These are
#             only required if the 'resampleFlag' is set to 'True' in the
#             'Outer loop' parameters below. Otherwise, this parameter can be
#             commented out.
#
ID           = None
xy_coords    = x  y
data         = pmRA  pmDE 
uncert       = e_pmRA e_pmDE

# Data outliers removal: stdregion, local, forest
# Masked data will be identified with a '-1' in the final output file.
oultr_method   = stdregion

# Standard deviation for the 'stdregion' method.
stdRegion_nstd = 5.




[Outer loop]

# Random seed integer for reproducibility. If 'None', a seed will be randomly
# selected.
rnd_seed     =  None

# A value of '0' will hide most of the output. A value of '1' will print all
# output to screen.
verbose      = 1

# Number of outer loop (OL) runs.
OL_runs      = 1

# Parallel run flag
parallel     = False

# If the above flag is True, set the number of processes to use. If 'None',
# it will be set to the number of available CPUs.
processes    = None

# Re-sample using uncertainties?
resampleFlag = False

# Apply PCA dimensionality reduction?
PCAflag      = True

# Number of dimensions to keep
PCAdims      = int_2

# Apply Gaussian-Uniform Mixture Model cleaning?
GUMM_flag    = True

# This percentile decides the probability value (obtained by the GUMM) below
# which stars will be marked as non-members. A value closer to '0' improves the
# completeness at the expense of the purity and vice-versa for values closer
# to '100'. Use 'auto' to select the value where the probability curve raises
# above 'P=0.'.
GUMM_perc    = auto




[Inner loop]

# Number of members per cluster, and maximum number of clusters defined.
N_membs    = 50

# Clustering method
#
# scikit-learns methods
# See: https://scikit-learn.org/stable/modules/clustering.html for a
# description of all the methods below.
#
# KMeans, MiniBatchKMeans, AffinityPropagation, MeanShift,
# SpectralClustering, AgglomerativeClustering, DBSCAN, OPTICS, Birch,
# GaussianMixture, BayesianGaussianMixture, Voronoi
#
# The 'rkde' method uses R's 'kmeans' function, as done in UPMASK
#
# The 'Voronoi' method is adapted from the method presented in the article
# 'Clustering by fast search and find of density peaks', Rodriguez & Laio (2014)
# https://science.sciencemag.org/content/344/6191/1492
# This method requires a single outer loop run ('OL_runs') because the results
# will not change with subsequent runs.
clust_method = Voronoi

# Method used to reject a subset of (x,y) data (found through the clustering
# method selected above), based on its similarity with a random 2D uniform
# distribution.
#
# Select between:
# * rkfunc    : use Ripley's K function
# * kdetest   : use UPMASK's KDE-based test, implemented with R code (requires
#               the 'rpy2'  package)
# * kdetestpy : use UPMASK's KDE-based test, implemented with Python code
clRjctMethod  = rkfunc

# Threshold value (in standard deviations) used to reject a subset of (x,y)
# data due to its likeness with a sample of uniform random 2D data (i.e, a
# subset made of mostly field stars). Only used for 'kdetest' and 'kdetestpy'.
C_thresh      = 1




[Clustering parameters]

# Parameters (if any) for the selected clustering method. Only used if any of
# the scikit-learn methods was selected.
# For all the parameters below the format is 'xxx_yyyy', where:
# 'xxx' is the type of the parameter (bool, str, int, float), and
# 'yyyy' is the value of the parameter.
#
#threshold        = float_0.1
#compute_labels   = bool_True
#n_init       =  int_50
#cluster_all   = bool_False
#bandwidth     = float_0.1
#covariance_type = str_tied
