

[Data columns]

# ID        : Name of the columns containing the IDs. If the file does not have
#             an 'ID' column, set to 'None' and one will be automatically
#             generated.
# xy_coords : Names of the columns containing the (x, y) coordinates.
# data      : Names of the data columns to be analyzed with the clustering
#             method.
# uncert    : Names of the columns containing the data uncertainties. These are
#             only required if the 'resampleFlag' is set to 'True' in the
#             'Outer loop' parameters below. Otherwise, this parameter can be
#             commented out.
#
ID           = None
xy_coords    = x  y
#data       = pmRA  pmDE 
#uncert    = BV  BV
# For UPMASK's synthetic clusters
data           = U B V R I J H K
#V B_V U_B V_I R_I
#uncert         = V  B_V  U_B  V_I

# For all the parameters below the format is 'xxx_yyyy', where:
# 'xxx' is the type of the parameter (bool, str, int, float), and
# 'yyyy' is the value of the parameter.

# Data outliers removal: stdregion, local, forest
# Masked data will be identified with a '-1' in the final output file.
#
oultr_method   = str_stdregion
#
# Standard deviation for the 'stdregion' method.
stdRegion_nstd = float_5.



[Outer loop]

# Random seed integer for reproducibility. If 'None', a seed will be randomly
# selected.
#
rnd_seed     =  str_None

# A value of '0' will hide most of the output. A value of '1' will print all
# output to screen.
#
verbose      = int_1

# Number of outer loop (OL) runs.
#
OL_runs      = int_1

# Re-sample using uncertainties?
#
resampleFlag = bool_False

# Apply PCA dimensionality reduction?
#
PCAflag      = bool_True
#
# Number of dimensions to keep
PCAdims      = int_2

# Apply Gaussian-Uniform Mixture Model cleaning?
#
GUMM_flag    = bool_True
#
# Percentile used to decide which stars will have their probability values
# replaced by the GUMM probabilities. A value closer to 0 improves the
# completeness at the expense of the purity and vice-versa.
GUMM_perc    = float_75



[Inner loop]

# Number of members per cluster, and maximum number of clusters defined.
#
N_membs    = int_50

# Clustering method
#
# scikit-learns methods
# See: https://scikit-learn.org/stable/modules/clustering.html for a
# description of all the methods below.
#
# KMeans, MiniBatchKMeans, AffinityPropagation, MeanShift,
# SpectralClustering, AgglomerativeClustering, DBSCAN, OPTICS, Birch,
# GaussianMixture, BayesianGaussianMixture, Voronoi
#
# The 'rkde' method uses R's 'kmeans' function, as done in UPMASK
#
# The 'Voronoi' method is adapted from the method presented in the article
# 'Clustering by fast search and find of density peaks', Rodriguez & Laio (2014)
# https://science.sciencemag.org/content/344/6191/1492
# This method requires a single outer loop run ('OL_runs') because the results
# will not change with subsequent runs.
#
clust_method = str_Voronoi

# Method used to reject a subset of (x,y) data (found through the clustering
# method selected above), based on its similarity with a random 2D uniform
# distribution.
#
# Select between:
# * rkfunc    : use Ripley's K function
# * kdetest   : use UPMASK's KDE-based test, implemented with R code (requires
#               the 'rpy2'  package)
# * kdetestpy : use UPMASK's KDE-based test, implemented with Python code
#
clRjctMethod  = str_rkfunc

# Select the radius for Ripley's K function. Accepted values: (0.3, 0.5, 0.7)
#
RK_rad        = float_0.5

# Threshold value (in standard deviations) used to reject a subset of (x,y)
# data due to its likeness with a sample of uniform random 2D data (i.e, a
# subset made of mostly field stars).
# Default values are 2. for 'rkfunc', and 1. for 'kdetest' and 'kdetestpy'
#
C_thresh      = float_2



[Clustering parameters]
# Parameters (if any) for the selected clustering method. Only used if any of
# the scikit-learn methods was selected.
#threshold        = float_0.1
#compute_labels   = bool_True
#n_init       =  int_50
#cluster_all   = bool_False
#bandwidth     = float_0.1
#covariance_type = str_tied
